<!DOCTYPE html>

<html>

  <head>

  </head>

  <body>

    <main class="container home"> <!-- everything -->
      <div class="row home-header"> <!-- focusing on the row that is our header -->
        <div class="col-md-1 mr-auto"> <!-- breaking the header in three columns (.mr-auto to force sibling columns away from one another) -->
          <button id="new-project-button" class="btn btn-primary mr-auto">New</button>
          <div id="new-project-popover" class="project-popover is-hidden"> <!-- where we start the static popover -->
            <%= form_with(model: @project) do |f| %>
              <div class="form-group">
                <%= f.text_field :name, class: "form-control", id: "project-name-input", placeholder: "Name this project", autofocus: true %> <!-- Input text field -->
              </div>
              <%= f.submit "Save", class: "btn btn-success" %>
              <button id="cancel-project-popover" class="btn btn-secondary">Cancel</button>
              <% end %>
          </div>
        </div>
        <div class="col-md-4">
          <h3 class="text-center">Projects</h3>
        </div>
        <div class="col-md-1 ml-auto"> <!-- ml-auto sends content to the right of the screen -->
          <button class="btn ml-auto">...</button>
        </div>
      </div>

      <!-- mr-auto and ml-auto are bootstrapper helper classes to achieve auto margin-right or auto margin-left, which is what pushes them away from the center column -->

      <div id="project-list" class="row home-projects"> <!-- each div col-md-4 is a new project box -->
        <% @projects.each do |project| %>
          <%= render "project_card", project: project %>
        <% end %>
      </div>
    </main>

    <script>
      // We have to make sure turbolinks is loaded before we work our magic, feel free to experiment without!
      document.addEventListener('turbolinks:load', function () {
        // Assign the elements we're intrerested in to variables
        const openProjectButton = document.getElementById('new-project-button')
        const projectPopover = document.getElementById('new-project-popover')

        // Let's check to see if these elements exist before we add our listeners. We'll get warnings in our browser console otherwise.
        if (openProjectButton && projectPopover) {
          // Attach an event listener to our new project button
          openProjectButton.addEventListener('click', function () {
            // If the project popovers class list contains the 'is-hidden' class, remove it, otherwise return null
            return projectPopover.classList.contains('is-hidden') ? projectPopover.classList.remove('is-hidden') : null
          }, false)

          // Attach a click event listener to our cancel button
          const cancelProjectPopover = document.getElementById('cancel-project-popover')
          cancelProjectPopover.addEventListener('click', function () {
            // We can safely assume that if our user can see the Cancel button, then the
            // .is-hidden class is not part of the class list of project pop-over and we can
            // add it.
            return projectPopover.classList.add('is-hidden')
          }, false)
        }
      })
    </script>

  </body>

</html>
